create or replace PROCEDURE TRANSACTION(STORE_ID int, t_a varray_product, t_b varray_quantity, CUSTOMER_ID int, P_ID NUMBER, ORDER_DATE DATE DEFAULT NULL, CRD_NO NUMBER DEFAULT NULL, CCEXP_DATE DATE DEFAULT NULL, CHEQ NUMBER DEFAULT NULL) IS
    CID CUSTOMER.CUSTOMER_ID%TYPE;
    SID STORE.STORE_ID%TYPE;
    PRODID PRODUCT.PRODUCT_ID%TYPE;
    QTY INVOICE_ORDER_DETAILS.QUANTITY%TYPE;
    insufficient_QTY INVOICE_ORDER_DETAILS.QUANTITY%TYPE;
    insufficient_PRODID INVOICE_ORDER_DETAILS.PRODUCT_ID%TYPE;
    empNO EMPLOYEE.EMP_ID%TYPE;
    empcnt EMPLOYEE.EMP_ID%TYPE;
    INV_ID INVOICE_ORDER.INVOICE_ID%TYPE;
    INV_L_ID INVOICE_ORDER_DETAILS.INVOICE_LINE_ID%TYPE;
    price INVOICE_ORDER.SALE_AMT%TYPE := 0;
    total_price INVOICE_ORDER.SALE_AMT%TYPE;
	tot_price INVOICE_ORDER.SALE_AMT%TYPE;
    TX INVOICE_ORDER.TAX%TYPE;
    ORD_DATE INVOICE_ORDER.ORDER_DATE%TYPE := ORDER_DATE;
    ex_insufficientQty EXCEPTION;

BEGIN
    SID := STORE_ID;
    SELECT COUNT(*) into empcnt FROM EMPLOYEE WHERE STORE_ID = SID;
    empNO := dbms_random.value(1,empcnt);


	FOR  i in 1 .. t_a.count LOOP
        SELECT qty INTO insufficient_QTY FROM store_stock WHERE PRODUCT_ID = t_a(i) and store_id = SID;
        IF t_b(i) > insufficient_QTY then 
            raise ex_insufficientQty;
        end if;
    END LOOP;
    
    FOR  i in 1 .. t_a.count LOOP
        SELECT PRODUCT_PRICE*t_b(i) INTO tot_price FROM PRODUCT WHERE PRODUCT_ID = t_a(i);
        price := price + tot_price;
    END LOOP;

    IF ORDER_DATE IS NULL THEN SELECT SYSDATE INTO ORD_DATE FROM DUAL;
    END IF;


    INSERT INTO INVOICE_ORDER(CUSTOMER_ID, STORE_ID, EMP_ID, ORDER_DATE) VALUES(CUSTOMER_ID, SID, empNO, ORD_DATE);
    SELECT INVOICE_ID INTO INV_ID FROM INVOICE_ORDER WHERE rownum = 1 ORDER BY INVOICE_ID DESC;



    FOR  i in 1 .. t_a.count LOOP

        SELECT PRODUCT_PRICE INTO price FROM PRODUCT WHERE PRODUCT_ID = t_a(i) ;
        SELECT QTY INTO QTY FROM STORE_STOCK WHERE PRODUCT_ID = t_a(i) AND STORE_ID = SID;
		IF QTY > 10 THEN
			INSERT INTO INVOICE_ORDER_DETAILS(INVOICE_ID, PRODUCT_ID, UNIT_PRICE, QUANTITY) VALUES(INV_ID, t_a(i), price, t_b(i));
		ELSIF QTY < 11 AND t_b(i) > 2 THEN 
			INSERT INTO INVOICE_ORDER_DETAILS(INVOICE_ID, PRODUCT_ID, UNIT_PRICE, QUANTITY) VALUES(INV_ID, t_a(i), price, 2);
		ELSE
			INSERT INTO INVOICE_ORDER_DETAILS(INVOICE_ID, PRODUCT_ID, UNIT_PRICE, QUANTITY) VALUES(INV_ID, t_a(i), price, t_b(i));
        END IF;
    END LOOP;

    SELECT SUM(UNIT_PRICE)*QUANTITY INTO total_price FROM INVOICE_ORDER_DETAILS WHERE INVOICE_ID = INV_ID GROUP BY INVOICE_ID, QUANTITY;
	UPDATE INVOICE_ORDER SET SALE_AMT = total_price, TAX = 0.15 * total_price WHERE INVOICE_ID = INV_ID;
    SELECT TAX INTO TX FROM INVOICE_ORDER WHERE INVOICE_ID = INV_ID;

	IF (total_price < 10 and P_ID <> 10) THEN 
		INSERT INTO PAYMENT_DETAILS(PAY_ID, INVOICE_ID, CARD_NO, CCEXPIRY_DATE, CHEQUE_NO, TRANSACTION_AMOUNT) VALUES(10, INV_ID, NULL, NULL, NULL, total_price);
	ELSE
		INSERT INTO PAYMENT_DETAILS(PAY_ID, INVOICE_ID, CARD_NO, CCEXPIRY_DATE, CHEQUE_NO, TRANSACTION_AMOUNT) VALUES(P_ID, INV_ID, CRD_NO, CCEXP_DATE, CHEQ, total_price+TX);
    END IF;

    MERGE INTO STORE_STOCK S
    USING (SELECT INVOICE_ID, PRODUCT_ID, QUANTITY FROM INVOICE_ORDER_DETAILS WHERE INVOICE_ID = INV_ID) INV_OR_D
    ON (S.PRODUCT_ID = INV_OR_D.PRODUCT_ID)
    WHEN MATCHED THEN UPDATE SET S.QTY = S.QTY - INV_OR_D.QUANTITY
    WHERE S.STORE_ID = SID;
    
    exception
    when ex_insufficientQty then
    dbms_output.put_line('Cannot not Sufficient Quantity Available'); 

END;